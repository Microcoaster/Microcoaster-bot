/**
 * Gestionnaire de l'√©v√©nement "ready".
 *
 * Ce module est d√©clench√© une seule fois lorsque le bot est connect√© et pr√™t.
 * Il affiche un message de confirmation dans la console et v√©rifie l'int√©grit√© des r√¥les.
 */

const WarrantyDAO = require("../dao/warrantyDAO");
const warrantyDAO = new WarrantyDAO();
const cron = require("node-cron");

module.exports = {
  name: "ready",
  once: true,
  /**
   * M√©thode ex√©cut√©e lors du d√©clenchement de l'√©v√©nement "ready".
   *
   * @param {Client} client - L'instance du bot Discord.
   */
  async execute(client) {
    console.log(`
  \x1b[38;2;210;130;0m ‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó 
  \x1b[38;2;205;120;0m ‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó
  \x1b[38;2;200;110;0m ‚ñà‚ñà‚ïî‚ñà‚ñà‚ñà‚ñà‚ïî‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù
  \x1b[38;2;195;100;0m ‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë‚ïö‚ïê‚ïê‚ïê‚ïê‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó
  \x1b[38;2;190;90;0m ‚ñà‚ñà‚ïë ‚ïö‚ïê‚ïù ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë
  \x1b[38;2;185;80;0m ‚ïö‚ïê‚ïù     ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù   ‚ïö‚ïê‚ïù   ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù\x1b[0m
                            üé¢ Premium 3D Printed Microcoaster‚Ñ¢ Support Bot üé¢
`);

    console.log(
      `\x1b[0müöÄ  Le bot est pr√™t ! Connect√© en tant que \x1b[38;5;45m${client.user.tag}\x1b[0m (\x1b[38;5;45m${client.user.id}\x1b[0m)`,
    );

    console.log(`\x1b[38;5;2müìä  Statistiques :\x1b[0m`);
    console.log(
      `   ‚Ä¢ Serveurs : \x1b[38;5;45m${client.guilds.cache.size}\x1b[0m`,
    );
    console.log(
      `   ‚Ä¢ Utilisateurs : \x1b[38;5;45m${client.users.cache.size}\x1b[0m`,
    );
    console.log(
      `   ‚Ä¢ Commandes charg√©es : \x1b[38;5;45m${client.commands?.size || 0}\x1b[0m`,
    );

    // Optionnel : d√©finir le statut du bot depuis la configuration
    const config = require("../config/config.json");
    const activityType = config.bot.activity_type || "WATCHING";
    const status = config.bot.status || "MicroCoaster‚Ñ¢ Support | /help";

    client.user.setActivity(status, { type: activityType });

    // V√©rification de l'int√©grit√© des r√¥les au d√©marrage
    console.log(
      "\x1b[38;5;3müîç  V√©rification de l'int√©grit√© des r√¥les...\x1b[0m",
    );
    try {
      await verifyRoleIntegrity(client);
      console.log("\x1b[38;5;2m‚úÖ  V√©rification des r√¥les termin√©e.\x1b[0m");
    } catch (error) {
      console.error(
        "\x1b[38;5;1m‚ùå  Erreur lors de la v√©rification des r√¥les:\x1b[0m",
        error,
      );
    }

    // V√©rification des tickets au d√©marrage
    console.log(
      "\x1b[38;5;3müé´  V√©rification de l'int√©grit√© des tickets...\x1b[0m",
    );
    try {
      await verifyTicketIntegrity(client);
      console.log("\x1b[38;5;2m‚úÖ  V√©rification des tickets termin√©e.\x1b[0m");
    } catch (error) {
      console.error(
        "\x1b[38;5;1m‚ùå  Erreur lors de la v√©rification des tickets:\x1b[0m",
        error,
      );
    }

    // Programmation des t√¢ches cron pour les rappels de garantie
    console.log(
      "\x1b[38;5;3m‚è∞  Programmation des t√¢ches automatiques...\x1b[0m",
    );
    setupCronJobs(client);
    console.log("\x1b[38;5;2m‚úÖ  T√¢ches automatiques programm√©es.\x1b[0m");
  },
};

/**
 * V√©rifie l'int√©grit√© des r√¥les sur le serveur configur√© uniquement
 */
async function verifyRoleIntegrity(client) {
  try {
    const config = require("../config/config.json");
    const targetGuildId = config.guild_id;
    const guild = client.guilds.cache.get(targetGuildId);

    if (!guild) {
      console.log(`‚ö†Ô∏è  Serveur configur√© (${targetGuildId}) non trouv√©`);
      return;
    }

    console.log(
      `üîç  V√©rification du serveur configur√©: ${guild.name} (${targetGuildId})`,
    );

    try {
      // R√©cup√©rer tous les utilisateurs avec des garanties actives avec timeout
      const activeWarranties = await Promise.race([
        warrantyDAO.getActiveWarranties(targetGuildId),
        new Promise(
          (_, reject) =>
            setTimeout(() => reject(new Error("connect ETIMEDOUT")), 60000), // 1 minute timeout
        ),
      ]);

      // V√©rifier que activeWarranties est un tableau
      if (!Array.isArray(activeWarranties)) {
        console.log(
          `   ‚ö†Ô∏è  R√©sultat inattendu de getActiveWarranties:`,
          typeof activeWarranties,
        );
        console.log(`   Aucune garantie active trouv√©e pour ${guild.name}`);
        return;
      }

      console.log(`   Trouv√© ${activeWarranties.length} garanties actives`);

      let rolesRestored = 0;

      for (const warranty of activeWarranties) {
        try {
          const member = await guild.members.fetch(warranty.user_id);
          if (!member) continue;

          const premiumRole = guild.roles.cache.get(
            config.roles.premium_role_id,
          );
          const warrantyRole = guild.roles.cache.get(
            config.roles.warranty_role_id,
          );

          let rolesAdded = [];

          // V√©rifier et restaurer le r√¥le premium
          if (
            premiumRole &&
            !member.roles.cache.has(config.roles.premium_role_id)
          ) {
            await member.roles.add(premiumRole);
            rolesAdded.push("Premium");
          }

          // V√©rifier et restaurer le r√¥le de garantie si elle n'a pas expir√©
          const now = new Date();
          const expirationDate = new Date(warranty.warranty_expires_at);

          if (
            warrantyRole &&
            expirationDate > now &&
            !member.roles.cache.has(config.roles.warranty_role_id)
          ) {
            await member.roles.add(warrantyRole);
            rolesAdded.push("Warranty");
          }
          if (rolesAdded.length > 0) {
            rolesRestored++;
            console.log(
              `   ‚Ü≥ R√¥les restaur√©s pour ${member.user.tag}: ${rolesAdded.join(", ")}`,
            );

            // Logger la restauration
            await warrantyDAO.logWarrantyAction({
              warranty_id: warranty.warranty_id,
              user_id: warranty.user_id,
              action_type: "ROLES_RESTORED",
              action_details: `Startup verification restored roles: ${rolesAdded.join(", ")}`,
              performed_by: client.user.id,
            });
          }
        } catch {
          console.log(
            `   ‚ö†Ô∏è  Utilisateur ${warranty.user_id} non trouv√© dans le serveur`,
          );
        }
      }

      if (rolesRestored > 0) {
        console.log(
          `   ‚úÖ ${rolesRestored} utilisateur(s) ont eu leurs r√¥les restaur√©s`,
        );
      } else {
        console.log(`   ‚úÖ Aucun r√¥le √† restaurer`);
      }
    } catch (guildError) {
      console.error(
        `   ‚ùå Erreur lors de la v√©rification du serveur ${guild.name}:`,
        guildError.message,
      );
    }

    console.log(
      `‚úÖ V√©rification de l'int√©grit√© termin√©e pour le serveur configur√©`,
    );
  } catch (error) {
    console.error(
      "‚ùå Erreur critique lors de la v√©rification des r√¥les:",
      error,
    );
  }
}

/**
 * V√©rifie l'int√©grit√© des tickets sur le serveur configur√© uniquement
 */
async function verifyTicketIntegrity(client) {
  try {
    const config = require("../config/config.json");
    const targetGuildId = config.guild_id;
    const guild = client.guilds.cache.get(targetGuildId);

    if (!guild) {
      console.log(
        `‚ö†Ô∏è  Serveur configur√© (${targetGuildId}) non trouv√© pour la v√©rification des tickets`,
      );
      return;
    }

    const TicketDAO = require("../dao/ticketDAO");
    const ticketDAO = new TicketDAO();

    // R√©cup√©rer tous les tickets ouverts
    const openTickets = await ticketDAO.getAllOpenTicketsWithChannels();
    console.log(
      `üîç  V√©rification de ${openTickets.length} ticket(s) ouvert(s) sur le serveur configur√©`,
    );

    if (openTickets.length === 0) {
      console.log("   ‚ÑπÔ∏è  Aucun ticket ouvert √† v√©rifier");
      return;
    }

    let deletedTickets = 0;
    let validTickets = 0;

    for (const ticket of openTickets) {
      try {
        // Chercher le salon uniquement dans le serveur configur√©
        const channel = guild.channels.cache.get(ticket.channel_id);

        if (channel) {
          console.log(
            `   ‚úÖ Ticket ${ticket.ticket_id}: salon trouv√© dans ${guild.name}`,
          );
          validTickets++;
        } else {
          // Si le salon n'existe plus, supprimer le ticket
          console.log(
            `   üóëÔ∏è  Ticket ${ticket.ticket_id}: salon ${ticket.channel_id} non trouv√©, suppression...`,
          );
          const deleted = await ticketDAO.deleteTicket(ticket.ticket_id);

          if (deleted) {
            deletedTickets++;
            console.log(
              `   ‚úÖ Ticket ${ticket.ticket_id} supprim√© avec succ√®s`,
            );
          } else {
            console.log(
              `   ‚ùå √âchec de la suppression du ticket ${ticket.ticket_id}`,
            );
          }
        }
      } catch (ticketError) {
        console.error(
          `   ‚ùå Erreur lors de la v√©rification du ticket ${ticket.ticket_id}:`,
          ticketError.message,
        );
      }
    }

    console.log(
      `‚úÖ V√©rification termin√©e: ${validTickets} tickets valides, ${deletedTickets} tickets supprim√©s`,
    );
  } catch (error) {
    console.error(
      "‚ùå Erreur critique lors de la v√©rification des tickets:",
      error,
    );
  }
}

/**
 * Configure les t√¢ches automatiques (cron jobs)
 */
function setupCronJobs(client) {
  // T√¢che quotidienne √† 9h00 pour v√©rifier les garanties expirant
  cron.schedule("0 9 * * *", async () => {
    console.log("üîî  V√©rification des rappels de garantie...");
    try {
      await checkWarrantyReminders(client);
    } catch (error) {
      console.error("Erreur lors de la v√©rification des rappels:", error);
    }
  });

  // T√¢che hebdomadaire le dimanche √† 10h00 pour nettoyer les donn√©es expir√©es
  cron.schedule("0 10 * * 0", async () => {
    console.log("üßπ  Nettoyage des donn√©es expir√©es...");
    try {
      await cleanupExpiredData(client);
    } catch (error) {
      console.error("Erreur lors du nettoyage:", error);
    }
  });
}

/**
 * V√©rifie les garanties n√©cessitant des rappels sur le serveur configur√© uniquement
 */
async function checkWarrantyReminders(client) {
  try {
    const config = require("../config/config.json");
    const targetGuildId = config.guild_id;

    console.log(
      `üîî  V√©rification des rappels pour le serveur configur√©: ${targetGuildId}`,
    );

    // Rappels √† 11 mois (30 jours avant expiration)
    const warrantiesNearExpiration =
      await warrantyDAO.getWarrantiesNearExpiration(targetGuildId, 30);

    for (const warranty of warrantiesNearExpiration) {
      try {
        const user = await client.users.fetch(warranty.user_id);
        const expirationDate = new Date(warranty.warranty_expires_at);

        const reminderEmbed = {
          color: 0xff9900,
          title: "‚ö†Ô∏è Warranty Expiration Reminder",
          description: "Your MicroCoaster‚Ñ¢ warranty will expire soon.",
          fields: [
            {
              name: "Expiration Date",
              value: `<t:${Math.floor(expirationDate.getTime() / 1000)}:F>`,
              inline: true,
            },
            {
              name: "Days Remaining",
              value: `${Math.ceil((expirationDate - new Date()) / (1000 * 60 * 60 * 24))} days`,
              inline: true,
            },
            {
              name: "Next Steps",
              value:
                "Contact our support team if you need assistance with renewal or have any questions.",
              inline: false,
            },
          ],
          footer: { text: "Thank you for choosing MicroCoaster‚Ñ¢!" },
          timestamp: new Date().toISOString(),
        };

        await user.send({ embeds: [reminderEmbed] });

        // Marquer le rappel comme envoy√©
        await warrantyDAO.markReminderSent(warranty.warranty_id, "30_days");
      } catch (userError) {
        console.log(
          `Impossible d'envoyer un rappel √† l'utilisateur ${warranty.user_id}: ${userError.message}`,
        );
      }
    }

    // Rappels √† 7 jours avant expiration
    const warrantiesVeryNearExpiration =
      await warrantyDAO.getWarrantiesNearExpiration(targetGuildId, 7);

    for (const warranty of warrantiesVeryNearExpiration) {
      try {
        const user = await client.users.fetch(warranty.user_id);
        const expirationDate = new Date(warranty.warranty_expires_at);

        const finalReminderEmbed = {
          color: 0xff0000,
          title: "üö® Final Warranty Expiration Notice",
          description:
            "Your MicroCoaster‚Ñ¢ warranty expires in less than 7 days!",
          fields: [
            {
              name: "Expiration Date",
              value: `<t:${Math.floor(expirationDate.getTime() / 1000)}:F>`,
              inline: true,
            },
            {
              name: "Days Remaining",
              value: `${Math.ceil((expirationDate - new Date()) / (1000 * 60 * 60 * 24))} days`,
              inline: true,
            },
            {
              name: "Important",
              value:
                "After expiration, you will lose access to warranty benefits. Contact support immediately if you need assistance.",
              inline: false,
            },
          ],
          footer: { text: "Thank you for choosing MicroCoaster‚Ñ¢!" },
          timestamp: new Date().toISOString(),
        };

        await user.send({ embeds: [finalReminderEmbed] });

        // Marquer le rappel comme envoy√©
        await warrantyDAO.markReminderSent(warranty.warranty_id, "7_days");
      } catch (userError) {
        console.log(
          `Impossible d'envoyer un rappel final √† l'utilisateur ${warranty.user_id}: ${userError.message}`,
        );
      }
    }
  } catch (error) {
    console.error(
      "Erreur lors de la v√©rification des rappels de garantie:",
      error,
    );
  }
}

/**
 * Nettoie les donn√©es expir√©es sur le serveur configur√© uniquement
 */
async function cleanupExpiredData(client) {
  try {
    const config = require("../config/config.json");
    const targetGuildId = config.guild_id;
    const guild = client.guilds.cache.get(targetGuildId);

    if (!guild) {
      console.log(
        `‚ö†Ô∏è  Serveur configur√© (${targetGuildId}) non trouv√© pour le nettoyage`,
      );
      return;
    }

    console.log(
      `üßπ  Nettoyage des donn√©es expir√©es pour le serveur configur√©: ${guild.name}`,
    );

    // R√©cup√©rer les garanties expir√©es
    const expiredWarranties = await warrantyDAO.getExpiredWarranties();

    for (const warranty of expiredWarranties) {
      try {
        const member = await guild.members.fetch(warranty.user_id);
        if (member && config.roles.warranty_role_id) {
          const warrantyRole = guild.roles.cache.get(
            config.roles.warranty_role_id,
          );

          if (
            warrantyRole &&
            member.roles.cache.has(config.roles.warranty_role_id)
          ) {
            await member.roles.remove(warrantyRole);
            console.log(
              `R√¥le de garantie retir√© pour ${member.user.tag} (garantie expir√©e)`,
            );
            // Logger l'action
            await warrantyDAO.logWarrantyAction({
              warranty_id: warranty.warranty_id,
              user_id: warranty.user_id,
              action_type: "WARRANTY_EXPIRED",
              action_details:
                "Warranty role automatically removed due to expiration",
              performed_by: client.user.id,
            });

            // Envoyer un DM d'information
            try {
              const expiredEmbed = {
                color: 0xff6b6b,
                title: "üìÖ Warranty Expired",
                description: "Your MicroCoaster‚Ñ¢ warranty has expired.",
                fields: [
                  {
                    name: "Expiration Date",
                    value: `<t:${Math.floor(new Date(warranty.warranty_expires_at).getTime() / 1000)}:F>`,
                    inline: true,
                  },
                  {
                    name: "Premium Access",
                    value: "Your premium access remains active.",
                    inline: true,
                  },
                  {
                    name: "Need Help?",
                    value:
                      "Contact our support team if you have questions about renewal or need assistance.",
                    inline: false,
                  },
                ],
                footer: { text: "Thank you for choosing MicroCoaster‚Ñ¢!" },
                timestamp: new Date().toISOString(),
              };

              await member.user.send({ embeds: [expiredEmbed] });
            } catch (dmError) {
              console.log(
                `Impossible d'envoyer un DM d'expiration √† ${member.user.tag}: ${dmError.message}`,
              );
            }
          }
        }
      } catch {
        console.log(`Membre ${warranty.user_id} non trouv√© lors du nettoyage`);
      }
    }
  } catch (error) {
    console.error("Erreur lors du nettoyage des donn√©es expir√©es:", error);
  }
}
